#include "HuffmanResult.h"
#include "Huffman.h"
#include "GUI/ProblemHandler.h"
#include "GUI/TemporaryComponent.h"
#include "GUI/GColorConsole.h"
#include "GUI/GUIMain.h"
#include "GUI/TextUtils.h"
#include "ginteractors.h"
#include "filelib.h"
#include "set.h"
#include <string>
#include <fstream>
#include <iomanip>
using namespace std;

namespace {
    #if   defined(_WIN32) || defined(_WIN64)

    void openFile(const string& filename) {
        string command = "start \"Decompressed File\" " + quotedVersionOf(filename);
        system(command.c_str());
    }
    #define HAS_OPEN_COMMAND

    #elif defined(__APPLE__) || defined(__MACH__)

    void openFile(const string& filename) {
        string command = "open " + quotedVersionOf(filename);
        system(command.c_str());
    }
    #define HAS_OPEN_COMMAND

    #elif defined(__linux__)

    void openFile(const string& filename) {
        string command = "xdg-open " + quotedVersionOf(filename);
        system(command.c_str());
    }
    #define HAS_OPEN_COMMAND

    #endif

    const string kFileSuffix = ".huff"; // Must be lower-case

    class DecompressGUI: public ProblemHandler {
    public:
        DecompressGUI(GWindow& window);
        void actionPerformed(GObservable* source) override;

    private:
        Temporary<GColorConsole> mDisplay;
        Temporary<GComboBox>     mFileChooser;
        Temporary<GButton>       mDecompressButton;

        #ifdef HAS_OPEN_COMMAND
        Temporary<GCheckBox>     mOpenOption;
        #endif
    };

    /* Returns a list of all files we can compress. This excludes anything that we
     * suspect was autogenerated by Qt.
     */
    Set<string> acceptableFiles() {
        Set<string> result;
        for (string file: listDirectory(".")) {
            /* Exclude anything that doesn't end in .huff. */
            if (!endsWith(toLowerCase(file), kFileSuffix)) continue;

            result += file;
        }

        return result;
    }

    DecompressGUI::DecompressGUI(GWindow& window) {
        mDisplay = make_temporary<GColorConsole>(window, "CENTER");

        GComboBox* choices = new GComboBox();
        for (const string& file: acceptableFiles()) {
            choices->addItem(file);
        }
        choices->setEditable(false);
        mFileChooser = Temporary<GComboBox>(choices, window, "SOUTH");

        mDecompressButton = make_temporary<GButton>(window, "SOUTH", "Decompress");

        #ifdef HAS_OPEN_COMMAND
        mOpenOption       = make_temporary<GCheckBox>(window, "SOUTH", "Open file after decompressing", false);
        #endif
    }

    HuffmanResult contentsOf(const string& filename) {
        ifstream input(filename, ios::binary);
        if (!input) {
            error("Could not open file " + filename + " for reading.");
        }

        return readHuffmanFile(input);
    }

    void decompressFile(GColorConsole& console, const string& filename, bool thenOpen) {
        console << "Reading file " << filename << "... " << flush;
        HuffmanResult hf = contentsOf(filename);
        console << "done!" << endl;

        console << "Decompressing... " << flush;
        string contents = decompress(hf);
        console << "done!" << endl;

        console << "Writing result to disk... " << flush;
        const string newFilename = filename.substr(0, filename.size() - kFileSuffix.size());
        ofstream out(newFilename, ios::binary);
        out << contents;
        out.close();
        console << "done!" << endl;
        console << endl;

        console << "File was saved as " << getCurrentDirectory() << "/" << newFilename << endl;
        console << endl;

        console << "Statistics: " << endl;
        uint64_t oldSize = fileSize(filename);
        uint64_t newSize = contents.size();
        console << "  Compressed file size:   " << oldSize << endl;
        console << "  Decompressed file size: " << newSize << endl;
        console << "  Compression ratio:      " << (100.0 * oldSize) / newSize << "%" << endl;
        console << endl;

        if (thenOpen) {
            openFile(newFilename);
        }
    }

    void DecompressGUI::actionPerformed(GObservable* source) {
        if (source == mDecompressButton) {
            setDemoOptionsEnabled(false);
            mDecompressButton->setEnabled(false);

            #ifdef HAS_OPEN_COMMAND
            bool shouldOpen = mOpenOption->isChecked();
            #else
            const bool shouldOpen = false;
            #endif

            decompressFile(*mDisplay, mFileChooser->getSelectedItem(), shouldOpen);

            mDecompressButton->setEnabled(true);
            setDemoOptionsEnabled(true);
        }
    }
}

shared_ptr<ProblemHandler> makeDecompressGUI(GWindow& window) {
    return make_shared<DecompressGUI>(window);
}
